// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teste.NET.Domain;

namespace XYZ.Migrations
{
    [DbContext(typeof(XYZContext))]
    partial class XYZContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14");

            modelBuilder.Entity("Domain.Models.CarrinhoCompra", b =>
                {
                    b.Property<int>("CarrinhoCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarrinhoItemId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalGeral")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("CarrinhoCompraId");

                    b.HasIndex("ClienteId");

                    b.ToTable("CarrinhoCompra");
                });

            modelBuilder.Entity("Domain.Models.CarrinhoItem", b =>
                {
                    b.Property<int>("CarrinhoItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CarrinhoCompraId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<string>("Quantidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("CarrinhoItemId");

                    b.HasIndex("CarrinhoCompraId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CarrinhoItem");
                });

            modelBuilder.Entity("Domain.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email2")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Telefone2")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Domain.Models.ClienteEndereco", b =>
                {
                    b.Property<int>("ClienteEnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteEnderecoId");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("ClienteEnderecos");
                });

            modelBuilder.Entity("Domain.Models.Produto", b =>
                {
                    b.Property<int>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("ProdutoId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Teste.NET.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.CarrinhoCompra", b =>
                {
                    b.HasOne("Domain.Models.Cliente", null)
                        .WithMany("CarrinhoCompras")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.CarrinhoItem", b =>
                {
                    b.HasOne("Domain.Models.CarrinhoCompra", null)
                        .WithMany("CarrinhoItems")
                        .HasForeignKey("CarrinhoCompraId");

                    b.HasOne("Domain.Models.Produto", null)
                        .WithMany("CarrinhoItems")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ClienteEndereco", b =>
                {
                    b.HasOne("Domain.Models.Cliente", "Cliente")
                        .WithOne("ClienteEndereco")
                        .HasForeignKey("Domain.Models.ClienteEndereco", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Domain.Models.CarrinhoCompra", b =>
                {
                    b.Navigation("CarrinhoItems");
                });

            modelBuilder.Entity("Domain.Models.Cliente", b =>
                {
                    b.Navigation("CarrinhoCompras");

                    b.Navigation("ClienteEndereco");
                });

            modelBuilder.Entity("Domain.Models.Produto", b =>
                {
                    b.Navigation("CarrinhoItems");
                });
#pragma warning restore 612, 618
        }
    }
}
